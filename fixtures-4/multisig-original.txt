let* fix1 = \ ~ ~ f -> let* s = \ s_0 x -> f (s_0 s_0) x in s s
     reconstructCaseError = "PT1"#t
     Unit = \ ~ case_Unit -> case_Unit
     unitval = ()#
     Tuple2 = \ ~ ~ arg_0 arg_1 ~ case_Tuple2 -> case_Tuple2 arg_0 arg_1
     fUnsafeFromDataTuple2_cunsafeFromBuiltinData =
       \ ~ ~ dUnsafeFromData dUnsafeFromData_0 d ->
         let* tup = unConstrData# d
              t = \ ~ -> sndPair# ! ! tup
              index = fstPair# ! ! tup
         in ifThenElse# !
              (equalsInteger# index 0#)
              (\ ds -> let* arg = headList# ! (t !); arg_0 = headList# ! (tailList# ! (t !)) in Tuple2 ! ! (dUnsafeFromData arg) (dUnsafeFromData_0 arg_0))
              (\ ds_0 -> let* wild = trace# ! reconstructCaseError Unit in ERROR)
              unitval
     fUnsafeFromDataCredential_cunsafeFromBuiltinData =
       \ d_0 ->
         let* tup_0 = unConstrData# d_0
              index_0 = fstPair# ! ! tup_0
         in ifThenElse# !
              (equalsInteger# index_0 1#)
              (\ ds_1 -> let* arg_1 = headList# ! (sndPair# ! ! tup_0); arg_0_0 = unBData# arg_1 in \ ~ case_PubKeyCredential case_ScriptCredential -> case_ScriptCredential arg_0_0)
              (\ ds_2 ->
                 ifThenElse# !
                   (equalsInteger# index_0 0#)
                   (\ ds_3 -> let* arg_2 = headList# ! (sndPair# ! ! tup_0); arg_0_1 = unBData# arg_2 in \ ~ case_PubKeyCredential_0 case_ScriptCredential_0 -> case_PubKeyCredential_0 arg_0_1)
                   (\ ds_4 -> let* wild_0 = trace# ! reconstructCaseError Unit in ERROR)
                   unitval)
              unitval
     fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData =
       \ d_1 ->
         let* tup_1 = unConstrData# d_1
              t_0 = \ ~ -> sndPair# ! ! tup_1
              t_1 = \ ~ -> tailList# ! (t_0 !)
              index_1 = fstPair# ! ! tup_1
         in ifThenElse# !
              (equalsInteger# index_1 1#)
              (\ ds_5 ->
                 let* arg_3 = headList# ! (t_0 !)
                      arg_4 = headList# ! (t_1 !)
                      arg_5 = headList# ! (tailList# ! (t_1 !))
                      arg_0_2 = unIData# arg_3
                      arg_1_0 = unIData# arg_4
                      arg_2 = unIData# arg_5
                 in \ ~ case_StakingHash case_StakingPtr -> case_StakingPtr arg_0_2 arg_1_0 arg_2)
              (\ ds_6 ->
                 ifThenElse# !
                   (equalsInteger# index_1 0#)
                   (\ ds_7 -> let* arg_6 = headList# ! (sndPair# ! ! tup_1); arg_0_3 = fUnsafeFromDataCredential_cunsafeFromBuiltinData arg_6 in \ ~ case_StakingHash_0 case_StakingPtr_0 -> case_StakingHash_0 arg_0_3)
                   (\ ds_8 -> let* wild_1 = trace# ! reconstructCaseError Unit in ERROR)
                   unitval)
              unitval
     fUnsafeFromDataDCert_cunsafeFromBuiltinData =
       \ d_2 ->
         let* tup_2 = unConstrData# d_2
              t_2 = \ ~ -> sndPair# ! ! tup_2
              t_3 = \ ~ -> sndPair# ! ! tup_2
              t_4 = \ ~ -> sndPair# ! ! tup_2
              index_2 = fstPair# ! ! tup_2
         in ifThenElse# !
              (equalsInteger# index_2 6#)
              (\ ds_9 ~ case_DCertDelegDeRegKey case_DCertDelegDelegate case_DCertDelegRegKey case_DCertGenesis case_DCertMir case_DCertPoolRegister case_DCertPoolRetire -> case_DCertMir)
              (\ ds_a ->
                 ifThenElse# !
                   (equalsInteger# index_2 5#)
                   (\ ds_b ~ case_DCertDelegDeRegKey_0 case_DCertDelegDelegate_0 case_DCertDelegRegKey_0 case_DCertGenesis_0 case_DCertMir_0 case_DCertPoolRegister_0 case_DCertPoolRetire_0 -> case_DCertGenesis_0)
                   (\ ds_c ->
                      ifThenElse# !
                        (equalsInteger# index_2 4#)
                        (\ ds_d ->
                           let* arg_7 = headList# ! (t_4 !)
                                arg_8 = headList# ! (tailList# ! (t_4 !))
                                arg_0_4 = unBData# arg_7
                                arg_1_1 = unIData# arg_8
                           in \ ~ case_DCertDelegDeRegKey_1 case_DCertDelegDelegate_1 case_DCertDelegRegKey_1 case_DCertGenesis_1 case_DCertMir_1 case_DCertPoolRegister_1 case_DCertPoolRetire_1 -> case_DCertPoolRetire_1 arg_0_4 arg_1_1)
                        (\ ds_e ->
                           ifThenElse# !
                             (equalsInteger# index_2 3#)
                             (\ ds_f ->
                                let* arg_9 = headList# ! (t_3 !)
                                     arg_a = headList# ! (tailList# ! (t_3 !))
                                     arg_0_5 = unBData# arg_9
                                     arg_1_2 = unBData# arg_a
                                in \ ~ case_DCertDelegDeRegKey_2 case_DCertDelegDelegate_2 case_DCertDelegRegKey_2 case_DCertGenesis_2 case_DCertMir_2 case_DCertPoolRegister_2 case_DCertPoolRetire_2 -> case_DCertPoolRegister_2 arg_0_5 arg_1_2)
                             (\ ds_g ->
                                ifThenElse# !
                                  (equalsInteger# index_2 2#)
                                  (\ ds_h ->
                                     let* arg_b = headList# ! (t_2 !)
                                          arg_c = headList# ! (tailList# ! (t_2 !))
                                          arg_0_6 = fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData arg_b
                                          arg_1_3 = unBData# arg_c
                                     in \ ~ case_DCertDelegDeRegKey_3 case_DCertDelegDelegate_3 case_DCertDelegRegKey_3 case_DCertGenesis_3 case_DCertMir_3 case_DCertPoolRegister_3 case_DCertPoolRetire_3 -> case_DCertDelegDelegate_3 arg_0_6 arg_1_3)
                                  (\ ds_i ->
                                     ifThenElse# !
                                       (equalsInteger# index_2 1#)
                                       (\ ds_j ->
                                          let* arg_d = headList# ! (sndPair# ! ! tup_2)
                                               arg_0_7 = fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData arg_d
                                          in \ ~ case_DCertDelegDeRegKey_4 case_DCertDelegDelegate_4 case_DCertDelegRegKey_4 case_DCertGenesis_4 case_DCertMir_4 case_DCertPoolRegister_4 case_DCertPoolRetire_4 -> case_DCertDelegDeRegKey_4 arg_0_7)
                                       (\ ds_k ->
                                          ifThenElse# !
                                            (equalsInteger# index_2 0#)
                                            (\ ds_m ->
                                               let* arg_e = headList# ! (sndPair# ! ! tup_2)
                                                    arg_0_8 = fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData arg_e
                                               in \ ~ case_DCertDelegDeRegKey_5 case_DCertDelegDelegate_5 case_DCertDelegRegKey_5 case_DCertGenesis_5 case_DCertMir_5 case_DCertPoolRegister_5 case_DCertPoolRetire_5 -> case_DCertDelegRegKey_5 arg_0_8)
                                            (\ ds_n -> let* wild_2 = trace# ! reconstructCaseError Unit in ERROR)
                                            unitval)
                                       unitval)
                                  unitval)
                             unitval)
                        unitval)
                   unitval)
              unitval
     True = \ ~ case_True case_False -> case_True
     False = \ ~ case_True_0 case_False_0 -> case_False_0
     fUnsafeFromDataBool_cunsafeFromBuiltinData =
       \ d_3 ->
         let* tup_3 = unConstrData# d_3
              index_3 = fstPair# ! ! tup_3
         in ifThenElse# ! (equalsInteger# index_3 1#) (\ ds_p -> True) (\ ds_r -> ifThenElse# ! (equalsInteger# index_3 0#) (\ ds_s -> False) (\ ds_t -> let* wild_3 = trace# ! reconstructCaseError Unit in ERROR) unitval) unitval
     fUnsafeFromDataExtended_cunsafeFromBuiltinData =
       \ ~ dUnsafeFromData_1 d_4 ->
         let* tup_4 = unConstrData# d_4
              index_4 = fstPair# ! ! tup_4
         in ifThenElse# !
              (equalsInteger# index_4 2#)
              (\ ds_u ~ case_Finite case_NegInf case_PosInf -> case_PosInf)
              (\ ds_v ->
                 ifThenElse# !
                   (equalsInteger# index_4 1#)
                   (\ ds_w -> let* arg_f = headList# ! (sndPair# ! ! tup_4); arg_0_9 = dUnsafeFromData_1 arg_f in \ ~ case_Finite_0 case_NegInf_0 case_PosInf_0 -> case_Finite_0 arg_0_9)
                   (\ ds_x -> ifThenElse# ! (equalsInteger# index_4 0#) (\ ds_y ~ case_Finite_1 case_NegInf_1 case_PosInf_1 -> case_NegInf_1) (\ ds_z -> let* wild_4 = trace# ! reconstructCaseError Unit in ERROR) unitval)
                   unitval)
              unitval
     fUnsafeFromDataTxId_cunsafeFromBuiltinData =
       \ d_5 ->
         let* tup_5 = unConstrData# d_5
              index_5 = fstPair# ! ! tup_5
         in ifThenElse# ! (equalsInteger# index_5 0#) (\ ds_10 -> let* arg_g = headList# ! (sndPair# ! ! tup_5) in unBData# arg_g) (\ ds_11 -> let* wild_5 = trace# ! reconstructCaseError Unit in ERROR) unitval
     fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData =
       \ d_6 ->
         let* tup_6 = unConstrData# d_6
              t_5 = \ ~ -> sndPair# ! ! tup_6
              index_6 = fstPair# ! ! tup_6
         in ifThenElse# !
              (equalsInteger# index_6 0#)
              (\ ds_12 -> let* arg_h = headList# ! (t_5 !); arg_i = headList# ! (tailList# ! (t_5 !)); arg_0_a = fUnsafeFromDataTxId_cunsafeFromBuiltinData arg_h; arg_1_4 = unIData# arg_i in \ ~ case_TxOutRef -> case_TxOutRef arg_0_a arg_1_4)
              (\ ds_13 -> let* wild_6 = trace# ! reconstructCaseError Unit in ERROR)
              unitval
     Just = \ ~ arg_0_b ~ case_Just case_Nothing -> case_Just arg_0_b
     Nothing = \ ~ ~ case_Just_0 case_Nothing_0 -> case_Nothing_0
     fUnsafeFromDataMaybe_cunsafeFromBuiltinData =
       \ ~ dUnsafeFromData_2 d_7 ->
         let* tup_7 = unConstrData# d_7
              index_7 = fstPair# ! ! tup_7
         in ifThenElse# !
              (equalsInteger# index_7 0#)
              (\ ds_14 -> let* arg_j = headList# ! (sndPair# ! ! tup_7) in Just ! (dUnsafeFromData_2 arg_j))
              (\ ds_15 -> ifThenElse# ! (equalsInteger# index_7 1#) (\ ds_16 -> Nothing !) (\ ds_17 -> let* wild_7 = trace# ! reconstructCaseError Unit in ERROR) unitval)
              unitval
     Nil = \ ~ ~ case_Nil case_Cons -> case_Nil
     Cons = \ ~ arg_0_c arg_1_5 ~ case_Nil_0 case_Cons_0 -> case_Cons_0 arg_0_c arg_1_5
     fUnsafeFromDataMap_cunsafeFromBuiltinData =
       \ ~ ~ dUnsafeFromData_3 dUnsafeFromData_4 ->
         let* go =
                fix1
                  !
                  !
                  (\ go_0 l ->
                     let* tup_8 = \ ~ -> headList# ! l
                     in chooseList# ! ! l (\ ds_18 -> Nil !) (\ ds_19 -> Cons ! (Tuple2 ! ! (dUnsafeFromData_3 (fstPair# ! ! (tup_8 !))) (dUnsafeFromData_4 (sndPair# ! ! (tup_8 !)))) (go_0 (tailList# ! l))) Unit)
         in \ d_8 -> go (unMapData# d_8)
     fUnsafeFromDataValue = \ eta -> fUnsafeFromDataMap_cunsafeFromBuiltinData ! ! unBData# unIData# eta
     fUnsafeFromDataTxOut_cunsafeFromBuiltinData =
       \ d_9 ->
         let* tup_9 = unConstrData# d_9
              t_6 = \ ~ -> sndPair# ! ! tup_9
              t_7 = \ ~ -> tailList# ! (t_6 !)
              index_8 = fstPair# ! ! tup_9
         in ifThenElse# !
              (equalsInteger# index_8 0#)
              (\ ds_1a ->
                 let* arg_k = headList# ! (t_6 !)
                      arg_m = headList# ! (t_7 !)
                      arg_n = headList# ! (tailList# ! (t_7 !))
                      tup_a = unConstrData# arg_k
                      t_8 = \ ~ -> sndPair# ! ! tup_a
                      index_9 = fstPair# ! ! tup_a
                      arg_0_d =
                        ifThenElse# !
                          (equalsInteger# index_9 0#)
                          (\ ds_1b ->
                             let* arg_p = headList# ! (t_8 !)
                                  arg_r = headList# ! (tailList# ! (t_8 !))
                                  arg_0_e = fUnsafeFromDataCredential_cunsafeFromBuiltinData arg_p
                                  arg_1_6 = fUnsafeFromDataMaybe_cunsafeFromBuiltinData ! fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData arg_r
                             in \ ~ case_Address -> case_Address arg_0_e arg_1_6)
                          (\ ds_1c -> let* wild_8 = trace# ! reconstructCaseError Unit in ERROR)
                          unitval
                      arg_1_7 = fUnsafeFromDataMap_cunsafeFromBuiltinData ! ! unBData# fUnsafeFromDataValue arg_m
                      arg_2_0 = fUnsafeFromDataMaybe_cunsafeFromBuiltinData ! unBData# arg_n
                 in \ ~ case_TxOut -> case_TxOut arg_0_d arg_1_7 arg_2_0)
              (\ ds_1d -> let* wild_9 = trace# ! reconstructCaseError Unit in ERROR)
              unitval
     fUnsafeFromDataNil_cunsafeFromBuiltinData =
       \ ~ dUnsafeFromData_5 -> let* go_1 = fix1 ! ! (\ go_2 l_0 -> chooseList# ! ! l_0 (\ ds_1e -> Nil !) (\ ds_1f -> Cons ! (dUnsafeFromData_5 (headList# ! l_0)) (go_2 (tailList# ! l_0))) Unit) in \ d_a -> go_1 (unListData# d_a)
     foldr = fix1 ! ! (\ foldr_0 arg_s ~ ~ f_0 acc l_1 -> l_1 ! (\ ~ -> acc) (\ x_0 xs ~ -> f_0 x_0 (foldr_0 (\ ~ x_1 -> x_1) ! ! f_0 acc xs)) !)
     CConsMonoid = \ ~ arg_0_f arg_1_8 ~ case_CConsMonoid -> case_CConsMonoid arg_0_f arg_1_8
     p1Monoid = \ ~ v -> v ! (\ v_0 v_1 -> v_0)
     mempty = \ ~ v_2 -> v_2 ! (\ v_3 v_4 -> v_4)
     fFoldableNil_cfoldMap = fix1 ! ! (\ fFoldableNil_cfoldMap_0 arg_t ~ ~ dMonoid eta_0 eta_1 -> eta_1 ! (\ ~ -> mempty ! dMonoid) (\ x_2 xs_0 ~ -> p1Monoid ! dMonoid (eta_0 x_2) (fFoldableNil_cfoldMap_0 (\ ~ x_3 -> x_3) ! ! dMonoid eta_0 xs_0)) !)
     GHC_Types_Nil = \ ~ ~ case_GHC_Types_Nil case_GHC_Types_Cons -> case_GHC_Types_Nil
     GHC_Types_Cons = \ ~ arg_0_g arg_1_9 ~ case_GHC_Types_Nil_0 case_GHC_Types_Cons_0 -> case_GHC_Types_Cons_0 arg_0_g arg_1_9
     match_GHC_Types_Nil = \ ~ x_4 -> x_4
     MultiSig_MultiSig = \ arg_0_h arg_1_a ~ case_MultiSig_MultiSig -> case_MultiSig_MultiSig arg_0_h arg_1_a
     ms = MultiSig_MultiSig (GHC_Types_Cons ! "some-string-which-is-28-long"#b (GHC_Types_Cons ! "s0me-string-which-is-28-long"#b (GHC_Types_Cons ! "some-string-which-is-28-l0ng"#b (GHC_Types_Nil !)))) 2#
in \ datum redeemer ctx ->
     let* tup_b = unConstrData# ctx
          t_9 = \ ~ -> sndPair# ! ! tup_b
          index_a = fstPair# ! ! tup_b
          p =
            ifThenElse# !
              (equalsInteger# index_a 0#)
              (\ ds_1g ->
                 let* arg_u = headList# ! (t_9 !)
                      arg_v = headList# ! (tailList# ! (t_9 !))
                      tup_c = unConstrData# arg_u
                      t_a = \ ~ -> sndPair# ! ! tup_c
                      t_b = \ ~ -> tailList# ! (t_a !)
                      t_c = \ ~ -> tailList# ! (t_b !)
                      t_d = \ ~ -> tailList# ! (t_c !)
                      t_e = \ ~ -> tailList# ! (t_d !)
                      t_f = \ ~ -> tailList# ! (t_e !)
                      t_g = \ ~ -> tailList# ! (t_f !)
                      t_h = \ ~ -> tailList# ! (t_g !)
                      t_i = \ ~ -> tailList# ! (t_h !)
                      index_b = fstPair# ! ! tup_c
                      arg_0_i =
                        ifThenElse# !
                          (equalsInteger# index_b 0#)
                          (\ ds_1h ->
                             let* arg_w = headList# ! (t_a !)
                                  arg_x = headList# ! (t_b !)
                                  arg_y = headList# ! (t_c !)
                                  arg_z = headList# ! (t_d !)
                                  arg_10 = headList# ! (t_e !)
                                  arg_11 = headList# ! (t_f !)
                                  arg_12 = headList# ! (t_g !)
                                  arg_13 = headList# ! (t_h !)
                                  arg_14 = headList# ! (t_i !)
                                  arg_15 = headList# ! (tailList# ! (t_i !))
                                  arg_0_j =
                                    fUnsafeFromDataNil_cunsafeFromBuiltinData
                                      !
                                      (\ d_b ->
                                         let* tup_d = unConstrData# d_b
                                              t_j = \ ~ -> sndPair# ! ! tup_d
                                              index_c = fstPair# ! ! tup_d
                                         in ifThenElse# !
                                              (equalsInteger# index_c 0#)
                                              (\ ds_1i ->
                                                 let* arg_16 = headList# ! (t_j !)
                                                      arg_17 = headList# ! (tailList# ! (t_j !))
                                                      arg_0_k = fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData arg_16
                                                      arg_1_b = fUnsafeFromDataTxOut_cunsafeFromBuiltinData arg_17
                                                 in \ ~ case_TxInInfo -> case_TxInInfo arg_0_k arg_1_b)
                                              (\ ds_1j -> let* wild_a = trace# ! reconstructCaseError Unit in ERROR)
                                              unitval)
                                      arg_w
                                  arg_1_c = fUnsafeFromDataNil_cunsafeFromBuiltinData ! fUnsafeFromDataTxOut_cunsafeFromBuiltinData arg_x
                                  arg_2_1 = fUnsafeFromDataMap_cunsafeFromBuiltinData ! ! unBData# fUnsafeFromDataValue arg_y
                                  arg_3 = fUnsafeFromDataMap_cunsafeFromBuiltinData ! ! unBData# fUnsafeFromDataValue arg_z
                                  arg_4 = fUnsafeFromDataNil_cunsafeFromBuiltinData ! fUnsafeFromDataDCert_cunsafeFromBuiltinData arg_10
                                  arg_5 = fUnsafeFromDataNil_cunsafeFromBuiltinData ! (fUnsafeFromDataTuple2_cunsafeFromBuiltinData ! ! fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData unIData#) arg_11
                                  tup_e = unConstrData# arg_12
                                  t_k = \ ~ -> sndPair# ! ! tup_e
                                  index_d = fstPair# ! ! tup_e
                                  arg_6 =
                                    ifThenElse# !
                                      (equalsInteger# index_d 0#)
                                      (\ ds_1k ->
                                         let* arg_18 = headList# ! (t_k !)
                                              arg_19 = headList# ! (tailList# ! (t_k !))
                                              tup_f = unConstrData# arg_18
                                              t_m = \ ~ -> sndPair# ! ! tup_f
                                              index_e = fstPair# ! ! tup_f
                                              arg_0_m =
                                                ifThenElse# !
                                                  (equalsInteger# index_e 0#)
                                                  (\ ds_1m ->
                                                     let* arg_1a = headList# ! (t_m !)
                                                          arg_1b = headList# ! (tailList# ! (t_m !))
                                                          arg_0_n = fUnsafeFromDataExtended_cunsafeFromBuiltinData ! unIData# arg_1a
                                                          arg_1_d = fUnsafeFromDataBool_cunsafeFromBuiltinData arg_1b
                                                     in \ ~ case_LowerBound -> case_LowerBound arg_0_n arg_1_d)
                                                  (\ ds_1n -> let* wild_b = trace# ! reconstructCaseError Unit in ERROR)
                                                  unitval
                                              tup_g = unConstrData# arg_19
                                              t_n = \ ~ -> sndPair# ! ! tup_g
                                              index_f = fstPair# ! ! tup_g
                                              arg_1_e =
                                                ifThenElse# !
                                                  (equalsInteger# index_f 0#)
                                                  (\ ds_1p ->
                                                     let* arg_1c = headList# ! (t_n !)
                                                          arg_1d = headList# ! (tailList# ! (t_n !))
                                                          arg_0_p = fUnsafeFromDataExtended_cunsafeFromBuiltinData ! unIData# arg_1c
                                                          arg_1_f = fUnsafeFromDataBool_cunsafeFromBuiltinData arg_1d
                                                     in \ ~ case_UpperBound -> case_UpperBound arg_0_p arg_1_f)
                                                  (\ ds_1r -> let* wild_c = trace# ! reconstructCaseError Unit in ERROR)
                                                  unitval
                                         in \ ~ case_Interval -> case_Interval arg_0_m arg_1_e)
                                      (\ ds_1s -> let* wild_d = trace# ! reconstructCaseError Unit in ERROR)
                                      unitval
                                  arg_7 = fUnsafeFromDataNil_cunsafeFromBuiltinData ! unBData# arg_13
                                  arg_8 = fUnsafeFromDataNil_cunsafeFromBuiltinData ! (fUnsafeFromDataTuple2_cunsafeFromBuiltinData ! ! unBData# (\ d_c -> d_c)) arg_14
                                  arg_9 = fUnsafeFromDataTxId_cunsafeFromBuiltinData arg_15
                             in \ ~ case_TxInfo -> case_TxInfo arg_0_j arg_1_c arg_2_1 arg_3 arg_4 arg_5 arg_6 arg_7 arg_8 arg_9)
                          (\ ds_1t -> let* wild_e = trace# ! reconstructCaseError Unit in ERROR)
                          unitval
                      tup_h = unConstrData# arg_v
                      index_g = fstPair# ! ! tup_h
                      arg_1_g =
                        ifThenElse# !
                          (equalsInteger# index_g 3#)
                          (\ ds_1u -> let* arg_1e = headList# ! (sndPair# ! ! tup_h); arg_0_r = fUnsafeFromDataDCert_cunsafeFromBuiltinData arg_1e in \ ~ case_Certifying case_Minting case_Rewarding case_Spending -> case_Certifying arg_0_r)
                          (\ ds_1v ->
                             ifThenElse# !
                               (equalsInteger# index_g 2#)
                               (\ ds_1w ->
                                  let* arg_1f = headList# ! (sndPair# ! ! tup_h)
                                       arg_0_s = fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData arg_1f
                                  in \ ~ case_Certifying_0 case_Minting_0 case_Rewarding_0 case_Spending_0 -> case_Rewarding_0 arg_0_s)
                               (\ ds_1x ->
                                  ifThenElse# !
                                    (equalsInteger# index_g 1#)
                                    (\ ds_1y ->
                                       let* arg_1g = headList# ! (sndPair# ! ! tup_h)
                                            arg_0_t = fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData arg_1g
                                       in \ ~ case_Certifying_1 case_Minting_1 case_Rewarding_1 case_Spending_1 -> case_Spending_1 arg_0_t)
                                    (\ ds_1z ->
                                       ifThenElse# !
                                         (equalsInteger# index_g 0#)
                                         (\ ds_20 -> let* arg_1h = headList# ! (sndPair# ! ! tup_h); arg_0_u = unBData# arg_1h in \ ~ case_Certifying_2 case_Minting_2 case_Rewarding_2 case_Spending_2 -> case_Minting_2 arg_0_u)
                                         (\ ds_21 -> let* wild_f = trace# ! reconstructCaseError Unit in ERROR)
                                         unitval)
                                    unitval)
                               unitval)
                          unitval
                 in \ ~ case_ScriptContext -> case_ScriptContext arg_0_i arg_1_g)
              (\ ds_22 -> let* wild_g = trace# ! reconstructCaseError Unit in ERROR)
              unitval
     in ms
          !
          (\ ds_23 ds_24 ->
             let* w = p ! (\ ds_25 ds_26 -> ds_25)
                  p_0 =
                    \ w_0 ->
                      w
                        !
                        (\ ww ww_0 ww_1 ww_2 ww_3 ww_4 ww_5 ww_6 ww_7 ww_8 ->
                           fFoldableNil_cfoldMap
                             (\ ~ x_5 -> x_5)
                             !
                             !
                             (CConsMonoid ! (\ ds_27 b -> ds_27 ! (\ ipv ~ -> ds_27) (\ ~ -> b) !) (Nothing !))
                             (\ x_6 -> ifThenElse# ! (equalsByteString# w_0 x_6) True False ! (\ ~ -> Just ! x_6) (\ ~ -> Nothing !) !)
                             ww_6
                             !
                             (\ ds_28 ~ -> True)
                             (\ ~ -> False)
                             !)
                  eta_2 = foldr (\ ~ x_7 -> x_7) ! ! (\ e xs_1 -> p_0 e ! (\ ~ -> Cons ! e xs_1) (\ ~ -> xs_1) !) (Nil !) ds_23
                  x_8 =
                    fFoldableNil_cfoldMap
                      (\ ~ x_9 -> x_9)
                      !
                      !
                      (let* v_5 = CConsMonoid ! (\ ds_29 ds_2a x_a -> ds_29 (ds_2a x_a)) (\ x_b -> x_b)
                       in CConsMonoid ! (\ eta_3 eta_4 -> p1Monoid ! v_5 eta_4 eta_3) (mempty ! v_5))
                      (\ x_c y -> addInteger# y 1#)
                      eta_2
                      0#
             in ifThenElse# ! (lessThanInteger# x_8 ds_24) False True ! (\ ~ -> True) (\ ~ -> trace# ! "E1"#t False) !)
          !
          (\ ~ -> Unit)
          (\ ~ -> ERROR)
          !
